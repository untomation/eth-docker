# Custom Prometheus rules. Use prometheus/custom-prom.yml which will be merged into
# /etc/prometheus/prometheus.yml inside the prometheus container.
#
# You could add additional scrape targets as well as additional global sections such as remote-write.
# This file is called grafana-cloud.yml as adding a remote write to Grafana Cloud is likely a
# common use case. It properly is a Prometheus without Grafana and the ability to add custom
# content to prometheus.yml

x-logging: &logging
  logging:
    driver: json-file
    options:
      max-size: 100m
      max-file: "3"
      tag: '{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}'

services:
  prometheus:
    restart: "unless-stopped"
    build:
      context: ./prometheus
    image: prometheus:local
    user: root
    pull_policy: never
    volumes:
      - prom-data:/prometheus
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./prometheus/custom-prom.yml:/etc/prometheus/custom-prom.yml:ro
      - ./prometheus/conf.d/:/etc/prometheus/conf.d/:ro
    command:
      - --storage.tsdb.path=/prometheus
      - --storage.tsdb.retention.time=40d
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles
    <<: *logging
    extra_hosts:  # So we can scrape targets on the host
      - "host.docker.internal:host-gateway"
    labels:
      - metrics.scrape=true
      - metrics.path=/metrics
      - metrics.port=9090
      - metrics.instance=prometheus
      - metrics.network=${NETWORK}

  ethereum-metrics-exporter:
    restart: "unless-stopped"
    image: samcm/ethereum-metrics-exporter:debian-latest
    entrypoint:
      - /ethereum-metrics-exporter
      - --consensus-url=http://consensus:${CL_REST_PORT:-5052}
      - --execution-url=http://execution:${EL_RPC_PORT:-8545}
    <<: *logging
    labels:
      - metrics.scrape=true
      - metrics.path=/metrics
      - metrics.port=9090
      - metrics.instance=ethereum-metrics-exporter

  node-exporter:
    image: prom/node-exporter:latest
    command:
      - '--path.rootfs=/host'
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=${NODE_EXPORTER_IGNORE_MOUNT_REGEX}'
      - '--no-collector.ipvs'
      - '--collector.textfile.directory=${NODE_EXPORTER_COLLECTOR_MOUNT_PATH:-/dev/null}'
      - '--collector.netdev.device-exclude=^(veth.*|docker.*|br-.*)$'
      - '--web.listen-address=0.0.0.0:${NODE_EXPORTER_PORT:-9199}'
    pid: host
    network_mode: host  # See all network interfaces
    restart: unless-stopped
    environment:
      - NODE_EXPORTER_COLLECTOR_MOUNT_PATH=${NODE_EXPORTER_COLLECTOR_MOUNT_PATH:-/dev/null}
    volumes:
      - /:/host:ro,rslave
      - /etc/hostname:/etc/nodename:ro
      - /proc:/host/proc:ro,rslave
      - /sys:/host/sys:ro,rslave
      - /etc/localtime:/etc/localtime:ro
      - ${NODE_EXPORTER_COLLECTOR_MOUNT_PATH:-/dev/null}:${NODE_EXPORTER_COLLECTOR_MOUNT_PATH:-/dev/null}:ro
    <<: *logging
    labels:
      - metrics.scrape=true
      - metrics.path=/metrics
      - metrics.host=host.docker.internal
      - metrics.port=${NODE_EXPORTER_PORT:-9199}
      - metrics.instance=node-exporter
      - metrics.network=${NETWORK}

  blackbox-exporter:
    restart: "unless-stopped"
    image: prom/blackbox-exporter:master
    volumes:
      - ./prometheus/blackbox.yml:/config/blackbox.yml
      - /etc/localtime:/etc/localtime:ro
    command:
      - --config.file=/config/blackbox.yml
    <<: *logging

  json-exporter:
    restart: "unless-stopped"
    image: prometheuscommunity/json-exporter:latest
    volumes:
      - ./prometheus/json.yml:/config/json.yml
      - /etc/localtime:/etc/localtime:ro
    command:
      - --config.file
      - /config/json.yml
    <<: *logging
    labels:
      - metrics.scrape=true
      - metrics.path=/metrics
      - metrics.port=7979
      - metrics.instance=json-exporter
      - metrics.network=${NETWORK}

  cadvisor:
    restart: "unless-stopped"
    image: gcr.io/cadvisor/cadvisor:v0.52.1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /:/rootfs:ro,rslave
      - /var/run:/var/run
      - /sys:/sys:ro,rslave
      - ${DOCKER_ROOT:-/var/lib/docker}:/var/lib/docker:ro,rslave
    devices:
      - /dev/kmsg:/dev/kmsg
    privileged: true
    command:
      - --docker_only
      - --housekeeping_interval=30s
    <<: *logging
    labels:
      - metrics.scrape=true
      - metrics.path=/metrics
      - metrics.port=8080
      - metrics.instance=cadvisor
      - metrics.network=${NETWORK}

  promtail:
    image: grafana/promtail:latest
    user: root
    volumes:
      - /etc/machine-id:/etc/machine-id:ro
      - ./promtail:/etc/promtail
      - promtail-data:/tmp
      - ${DOCKER_ROOT:-/var/lib/docker}/containers:/var/lib/docker/containers:ro,rslave
    entrypoint: ./etc/promtail/entrypoint.sh
    command: ["/usr/bin/promtail"]
    environment:
      SERVER_LABEL_HOSTNAME: ${LOGS_LABEL:-notset}
    restart: "unless-stopped"
    <<: *logging
    labels:
      - metrics.scrape=true
      - metrics.path=/metrics
      - metrics.port=9080
      - metrics.instance=promtail
      - metrics.network=${NETWORK}

volumes:
  prom-data:
  promtail-data:
